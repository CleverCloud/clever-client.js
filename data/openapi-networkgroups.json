{
  "openapi": "3.0.1",
  "info" : {
    "title": "Clever Cloud API",
    "description": "Use this API to manipulate your Clever Cloud services.",
    "version" : "4.0.0"
  },
  "servers": [
    {
      "url": "https://api.clever-cloud.com/v4",
      "description": "The production API server (v4)."
    },
    {
      "url": "https://api.par0.clvrcld.net/v4",
      "description": "The testing API server (v4)."
    }
  ],
  "paths": {
    "/organisations/{ownerId}/networkgroups": {
      "get": {
        "tags": ["networkgroups"],
        "summary": "List Networkgroups",
        "description": "Lists networkgroups from an owner.",
        "operationId": "listNetworkgroups",
        "x-service": "networkgroup",
        "x-function": "get",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/ListNetworkgroupsSuccess" },
          "401": { "$ref": "#/components/responses/ListNetworkgroupsUnauthorized" }
        }
      },
      "post": {
        "tags": ["networkgroups"],
        "summary": "Create Networkgroup",
        "description": "Creates a networkgroup.",
        "operationId": "createNetworkgroup",
        "x-service": "networkgroup",
        "x-function": "createNg",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/CreateNetworkgroup" },
        "responses": {
          "201": { "$ref": "#/components/responses/CreateNetworkgroupSuccess" },
          "400": { "$ref": "#/components/responses/CreateNetworkgroupBadRequest" },
          "409": { "$ref": "#/components/responses/CreateNetworkgroupConflict" }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}": {
      "delete": {
        "tags": ["networkgroups"],
        "summary": "Delete Networkgroup",
        "description": "Deletes a networkgroup.",
        "operationId": "deleteNetworkgroup",
        "x-service": "networkgroup",
        "x-function": "deleteNg",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" }
        ],
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "401": { "$ref": "#/components/responses/DeleteNetworkgroupUnauthorized" }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}/members": {
      "get": {
        "tags": ["networkgroups"],
        "summary": "List Members",
        "description": "Lists members from a networkgroup.",
        "operationId": "listMembers",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/ListMembersSuccess" },
          "404": { "$ref": "#/components/responses/ListMembersNotFound" }
        },
        "x-service": "networkgroup",
        "x-function": "listMembers"
      },
      "post": {
        "tags": ["networkgroups"],
        "summary": "Add Member",
        "description": "Adds a member to a networkgroup.",
        "operationId": "addMember",
        "x-service": "networkgroup",
        "x-function": "addMember",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/AddMember" },
        "responses": {
          "202": { "$ref": "#/components/responses/AcceptedForProcessing" },
          "400": { "$ref": "#/components/responses/AddMemberBadRequest" },
          "401": { "$ref": "#/components/responses/AddMemberUnauthorized" },
          "404": { "$ref": "#/components/responses/AddMemberNotFound" }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}/members/{memberId}": {
      "get": {
        "tags": ["networkgroups"],
        "summary": "Get Member",
        "description": "Gets details from a networkgroup member.",
        "operationId": "getMember",
        "x-service": "networkgroup",
        "x-function": "getMember",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" },
          { "$ref": "#/components/parameters/MemberId" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/GetMemberSuccess" },
          "401": { "$ref": "#/components/responses/GetMemberUnauthorized" },
          "404": { "$ref": "#/components/responses/GetMemberNotFound" }
        }
      },
      "delete": {
        "tags": ["networkgroups"],
        "summary": "Remove Member",
        "description": "Removes a member from a networkgroup.",
        "operationId": "removeMember",
        "x-service": "networkgroup",
        "x-function": "removeMember",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" },
          { "$ref": "#/components/parameters/MemberId" }
        ],
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "401": { "$ref": "#/components/responses/GetMemberUnauthorized" },
          "404": { "$ref": "#/components/responses/GetMemberNotFound" }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}/peers": {
      "get": {
        "tags": ["networkgroups"],
        "summary": "List Peers",
        "description": "Lists peers connected to a networkgroup.",
        "operationId": "listPeers",
        "x-service": "networkgroup",
        "x-function": "listPeers",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/ListPeersSuccess" },
          "401": { "$ref": "#/components/responses/ListPeersUnauthorized" },
          "404": { "$ref": "#/components/responses/ListPeersNotFound" }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}/peers/{peerId}": {
      "get": {
        "tags": ["networkgroups"],
        "summary": "Get Peer",
        "description": "Gets details from a networkgroup peer.",
        "operationId": "getPeer",
        "x-service": "networkgroup",
        "x-function": "getPeer",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" },
          { "$ref": "#/components/parameters/PeerId" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/GetPeerSuccess" },
          "401": { "$ref": "#/components/responses/GetPeerUnauthorized" },
          "404": { "$ref": "#/components/responses/GetPeerNotFound" }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}/peers/{peerId}/wireguard/configuration": {
      "get": {
        "tags": ["networkgroups"],
        "summary": "Get WireGuard Configuration",
        "description": "Gets the actual WireGuard configuration for a networkgroup peer.",
        "operationId": "getWgConf",
        "x-service": "networkgroup",
        "x-function": "getWgConf",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" },
          { "$ref": "#/components/parameters/PeerId" }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WireGuardConf"
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/GetPeerNotFound" }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}/peers/{peerId}/wireguard/configuration/stream": {
      "get": {
        "tags": ["networkgroups", "sse"],
        "summary": "WireGuard Configuration SSE",
        "description": "Retreives the actual WireGuard configuration for a networkgroup peer as a Server Sent Event.",
        "operationId": "sseWgConf",
        "x-service": "networkgroup",
        "x-function": "sseWgConf",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" },
          { "$ref": "#/components/parameters/PeerId" }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/event-stream": {}
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/GetPeerNotFound" }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}/external-peers": {
      "post": {
        "tags": ["networkgroups"],
        "summary": "Add External Peer",
        "description": "Adds an external peer to a networkgroup.",
        "operationId": "addExternalPeer",
        "x-service": "networkgroup",
        "x-function": "addExternalPeer",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddExternalPeerRequest" }
            }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/EmptyJSON" },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema" : {
                  "type": "string",
                  "example": "The request content was malformed:\n012.345.678.901 is not a correct ip address: DownField(ip)"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{ownerId}/networkgroups/{ngId}/external-peers/{peerId}": {
      "delete": {
        "tags": ["networkgroups"],
        "summary": "Remove External Peer",
        "description": "Removes an external peer from a networkgroup.",
        "operationId": "removeExternalPeer",
        "x-service": "networkgroup",
        "x-function": "removeExternalPeer",
        "parameters": [
          { "$ref": "#/components/parameters/OwnerId" },
          { "$ref": "#/components/parameters/NetworkgroupId" },
          { "$ref": "#/components/parameters/PeerId" }
        ],
        "responses": {
          "202": { "$ref": "#/components/responses/EmptyJSON" },
          "401": { "$ref": "#/components/responses/UnauthorizedNgNotInOrga" }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "OwnerId": {
        "name": "ownerId",
        "in": "path",
        "description": "An owner `id`. It can be a user `id` (i.e. `user_xxx`) for personal space, or an organization `id` (i.e. `orga_xxx`).",
        "required": true,
        "schema": { "$ref": "#/components/schemas/OwnerId" },
        "examples": {
          "Dynamic": {
            "value": "{{ownerId}}"
          }
        }
      },
      "NetworkgroupId": {
        "name": "ngId",
        "in": "path",
        "description": "A networkgroup `id`.",
        "required": true,
        "schema": { "$ref": "#/components/schemas/NetworkgroupId" },
        "examples": {
          "Dynamic": {
            "value": "{{ngId}}"
          }
        }
      },
      "MemberId": {
        "name": "memberId",
        "in": "path",
        "description": "A networkgroup member `id`.",
        "required": true,
        "schema": { "$ref": "#/components/schemas/MemberId" },
        "examples": {
          "Dynamic": {
            "value": "{{memberId}}"
          }
        }
      },
      "PeerId": {
        "name": "peerId",
        "in": "path",
        "description": "A networkgroup peer `id`.",
        "required": true,
        "schema": { "$ref": "#/components/schemas/PeerId" },
        "examples": {
          "Dynamic": {
            "value": "{{peerId}}"
          }
        }
      }
    },
    "schemas": {
      "OwnerId": {
        "title": "Owner `id`",
        "description" : "A user `id` (i.e. `user_xxx`) for personal space, or an organization `id` (i.e. `orga_xxx`).",
        "type": "string",
        "example": "orga_e7b264c3-fb77-46c6-9c8f-899e14465330"
      },
      "NetworkgroupId": {
        "title": "Networkgroup `id`",
        "description": "Unique `id` of a networkgroup.",
        "type": "string",
        "example": "ng_0358a60f-51de-4918-8790-3f8d60e2053b"
      },
      "NetworkgroupLabel": {
        "title": "Networkgroup Label",
        "description" : "Label of a networkgroup.",
        "type": "string",
        "example": "my-networkgroup"
      },
      "NetworkgroupDescription": {
        "title": "Networkgroup Description",
        "description" : "Description of a networkgroup.",
        "type": "string",
        "example": "A networkgroup with my apps and add-ons."
      },
      "MemberId": {
        "title": "Member `id`",
        "description": "Unique `id` of a networkgroup member.",
        "type": "string",
        "example": "app_df58468f-feaf-4f00-ab43-1f8e16c83a55"
      },
      "MemberType": {
        "title": "Member Type",
        "description": "The type of a networkgroup member. It can be an application (`'application'`), an add-on (`'addon'`) or an external node (`'external'`).",
        "type": "string",
        "enum": ["application", "addon", "external"]
      },
      "MemberLabel": {
        "title": "Member Label",
        "description": "Human-readable name of a networkgroup member.",
        "type": "string"
      },
      "MemberName": {
        "title": "Member Name",
        "description": "Member name used in the `<memberName>.m.<ngID>.ng.clever-cloud.com` domain name alias.",
        "type": "string"
      },
      "PeerId": {
        "title": "Peer `id`",
        "description": "Unique `id` of a networkgroup peer.",
        "type": "string",
        "example": "external_94a6e943-35de-4c9c-8fd4-e7d405bffda8"
      },
      "PeerType": {
        "title": "Peer Type",
        "description": "Type of a networkgroup peer.",
        "type": "string",
        "enum": ["CleverPeer", "ExternalPeer"]
      },
      "PeerLabel": {
        "title": "Peer Label",
        "description": "Label of a networkgroup peer.",
        "type": "string"
      },
      "PeerHostName": {
        "title": "Host Name",
        "description": "Host name of a networkgroup peer.",
        "type": "string",
        "example": "rust-1"
      },
      "PeerParentEvent": {
        "title": "Parent Event",
        "type": "string",
        "nullable": true
      },
      "ZoneId": {
        "title": "Zone `id`",
        "description": "A zone `id`.",
        "type": "string",
        "example": "par0"
      },
      "SemanticTag": {
        "title": "Tag",
        "description" : "A semantic tag.",
        "type": "string"
      },
      "EndpointType": {
        "title": "Endpoint Type",
        "description": "The type of a networkgroup endpoint. It can be a client endpoint (`'ClientEndpoint'`) or a server endpoint (`'ServerEndpoint'`).",
        "type": "string",
        "enum": ["ClientEndpoint", "ServerEndpoint"]
      },
      "Version": {
        "title": "Version",
        "description": "Version number.",
        "type": "integer",
        "format": "int32",
        "example": 42
      },
      "IpAddress": {
        "title": "IP Address",
        "description": "IP address.",
        "type": "string",
        "format": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
        "example": "10.105.0.42"
      },
      "IpAddressWithPort": {
        "title": "IP Address With Port",
        "description": "IP address with port number.",
        "type": "string",
        "format": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/\\d{1,5}$",
        "example": "10.105.0.0/16"
      },
      "PortNumber": {
        "title": "Port",
        "description": "A port number.",
        "type": "integer",
        "format": "int32",
        "example": 50159
      },
      "HypervisorHostName": {
        "title": "Host Name",
        "description": "Name of the hypervisor host.",
        "type": "string",
        "example": "hv-par0-001"
      },
      "WireGuardPublicKey": {
        "title": "WireGuard® Public Key",
        "description": "WireGuard® public key of a networkgroup peer. It's a Base64-encoded string (hence the format).",
        "type": "string",
        "format": "[a-zA-Z0-9+/]{43}=",
        "example": "Z5SECcCueLAf0+LwBfxxK81mkz2mskqdZ/GVsk/uFgs="
      },

      "Networkgroup": {
        "title": "Networkgroup",
        "required": ["id", "owner_id", "label", "description", "network_ip", "last-allocated-ip", "tags", "version"],
        "type": "object",
        "properties": {
          "id":                { "$ref": "#/components/schemas/NetworkgroupId" },
          "owner_id":          { "$ref": "#/components/schemas/OwnerId" },
          "label":             { "$ref": "#/components/schemas/NetworkgroupLabel" },
          "description":       { "$ref": "#/components/schemas/NetworkgroupDescription" },
          "network_ip":        { "$ref": "#/components/schemas/IpAddressWithPort" },
          "last-allocated-ip": { "$ref": "#/components/schemas/IpAddress" },
          "tags":              { "$ref": "#/components/schemas/ArrayOfSemanticTags" },
          "members":           { "$ref": "#/components/schemas/ArrayOfMembers" },
          "peers":             { "$ref": "#/components/schemas/ArrayOfPeers" },
          "version":           { "$ref": "#/components/schemas/Version" }
        },
        "example": { "$ref": "#/components/examples/Networkgroup" }
      },
      "CreateNetworkgroupRequest": {
        "title": "Create Networkgroup Request",
        "required": ["owner_id", "label", "description", "tags"],
        "type": "object",
        "properties": {
          "id":          { "$ref": "#/components/schemas/NetworkgroupId" },
          "owner_id":    { "$ref": "#/components/schemas/OwnerId" },
          "label":       { "$ref": "#/components/schemas/NetworkgroupLabel" },
          "description": { "$ref": "#/components/schemas/NetworkgroupDescription" },
          "tags":        { "$ref": "#/components/schemas/ArrayOfSemanticTags" },
          "members":     { "$ref": "#/components/schemas/ArrayOfMembers" }
        },
        "example": { "$ref": "#/components/examples/CreateNetworkgroupRequest" }
      },
      "Member": {
        "title": "Member",
        "description": "A networkgroup member is a set of nodes that should be in the network by a simple predicate: `id` is equals to an app `id` (i.e. `app_xxx`), an add-on `id` (i.e. `addon_xxx`) or an external node category `id`.",
        "required": ["id", "label", "domain-name", "type"],
        "type": "object",
        "properties": {
          "id":          { "$ref": "#/components/schemas/MemberId" },
          "label":       { "$ref": "#/components/schemas/MemberLabel" },
          "domain-name": { "$ref": "#/components/schemas/MemberName" },
          "type":        { "$ref": "#/components/schemas/MemberType" }
        },
        "example": { "$ref": "#/components/examples/Member" }
      },
      "AddMemberRequest": {
        "title": "Create Member Request",
        "description": "A networkgroup member is a set of nodes that should be in the network by a simple predicate: `id` is equals to an app `id` (i.e. `app_xxx`), an add-on `id` (i.e. `addon_xxx`) or an external node category `id`.",
        "required": ["id", "label", "domain-name", "type"],
        "type": "object",
        "properties": {
          "id":          { "$ref": "#/components/schemas/MemberId" },
          "label":       { "$ref": "#/components/schemas/MemberLabel" },
          "domain-name": { "$ref": "#/components/schemas/MemberName" },
          "type":        { "$ref": "#/components/schemas/MemberType" }
        },
        "example": { "$ref": "#/components/examples/AddMemberRequest" }
      },
      "Hypervisor": {
        "title": "Hypervisor",
        "required": ["host", "zone"],
        "type": "object",
        "properties": {
          "host": { "$ref": "#/components/schemas/HypervisorHostName" },
          "zone": { "$ref": "#/components/schemas/Zone" }
        },
        "example": { "$ref": "#/components/examples/Hypervisor" }
      },
      "Zone": {
        "title": "Zone",
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": { "$ref": "#/components/schemas/ZoneId" }
        },
        "example": { "$ref": "#/components/examples/Zone" }
      },
      "Endpoint": {
        "title": "Endpoint",
        "required": ["type"],
        "type": "object",
        "properties": {
          "ng-term":     { "$ref": "#/components/schemas/NetworkgroupTerm" },
          "public-term": { "$ref": "#/components/schemas/PublicTerm" },
          "type":        { "$ref": "#/components/schemas/EndpointType" },
          "ng-ip":       { "$ref": "#/components/schemas/IpAddressWithPort" }
        },
        "example": { "$ref": "#/components/examples/Endpoint" }
      },
      "NetworkgroupTerm": {
        "title": "Networkgroup Termination",
        "description": "A networkgroup termination.",
        "required": ["ip", "port"],
        "type": "object",
        "properties": {
          "ip":   { "$ref": "#/components/schemas/IpAddress" },
          "port": { "$ref": "#/components/schemas/PortNumber" }
        },
        "example": { "$ref": "#/components/examples/NetworkgroupTerm" }
      },
      "PublicTerm": {
        "title": "Public Termination",
        "description": "A public termination.",
        "required": ["ip", "port"],
        "type": "object",
        "properties": {
          "ip":   { "$ref": "#/components/schemas/IpAddress" },
          "port": { "$ref": "#/components/schemas/PortNumber" }
        },
        "example": { "$ref": "#/components/examples/PublicTerm" }
      },
      "AddExternalPeerRequest": {
        "title": "Add External Peer Request",
        "required": [
          "peer-role",
          "public-key",
          "parent-member"
        ],
        "type": "object",
        "properties": {
          "ip": {
            "description": "The public IP on which you are listening (only for `server` role).",
            "type": "string"
          },
          "port": {
            "description": "The public port on which you are listening (only for `server` role).",
            "type": "string"
          },
          "peer-role": {
            "description": "The role of this peer in the networkgroup. Either client (`'client'`) or server (`'server'`).",
            "type": "string",
            "enum": [
              "client",
              "server"
            ]
          },
          "label": {
            "description": "The label of the peer.",
            "type": "string"
          },
          "public-key": {
            "description": "The WireGuard public key of the peer.",
            "type": "string"
          },
          "hostname": {
            "description": "The host name to use for the peer.",
            "type": "string"
          },
          "parent_member": {
            "description": "The member `id` of the peer category.",
            "type": "string"
          }
        }
      },
      "Peer": {
        "title": "Peer",
        "required": ["id", "label", "hostname", "public-key", "endpoint", "parent_event", "parent_member", "type"],
        "type": "object",
        "properties": {
          "id":            { "$ref": "#/components/schemas/PeerId" },
          "label":         { "$ref": "#/components/schemas/PeerLabel" },
          "hostname":      { "$ref": "#/components/schemas/PeerHostName" },
          "hv":            { "$ref": "#/components/schemas/Hypervisor" },
          "public-key":    { "$ref": "#/components/schemas/WireGuardPublicKey" },
          "endpoint":      { "$ref": "#/components/schemas/Endpoint" },
          "parent_event":  { "$ref": "#/components/schemas/PeerParentEvent" },
          "parent_member": { "$ref": "#/components/schemas/MemberId" },
          "type":          { "$ref": "#/components/schemas/PeerType" }
        },
        "example": { "$ref": "#/components/examples/Peer" }
      },
      "WireGuardConf": {
        "title": "WireGuard Configuration",
        "description": "A WireGuard tunnel configuration file encoded in Base64 format, without its owner's private key. In `[Interface]`, you have to replace `PrivateKey = <%PrivateKey%>` by the desired private key.",
        "type": "string",
        "example": "W0ludGVyZmFjZV0NClByaXZhdGVLZXkgPSA8JVByaXZhdGVLZXklPg0KQWRkcmVzcyA9IDEwLjEwMi4wLjYvMTYNCg0KDQoNCg0KW1BlZXJdDQogICAgUHVibGljS2V5ID0gS2o5cFRDTjFMQ1JaYms1U1kxbFNPU3hJT2t4dFgyVlJWRlUwTkNaeGNTNHUNCiAgICBBbGxvd2VkSVBzID0gMTAuMTAyLjAuMTAvMzINCiAgICBQZXJzaXN0ZW50S2VlcGFsaXZlID0gMjUNCg0KDQoNCltQZWVyXQ0KICAgIFB1YmxpY0tleSA9IFpsOTlYV1p5VGpSa1J6TmJVWEF1Sm5WSVZTTXJaaWxrVmxSOVFGb3NSamdLDQogICAgQWxsb3dlZElQcyA9IDEwLjEwMi4wLjUvMzINCiAgICBQZXJzaXN0ZW50S2VlcGFsaXZlID0gMjUNCg0KDQoNCltQZWVyXQ0KICAgIFB1YmxpY0tleSA9IFlTMDVjaU5IWkVaNlpqZGpTMTF3TkhWNU4xUXBNMnRRYVVKWVdHUlNYem8NCiAgICBBbGxvd2VkSVBzID0gMTAuMTAyLjAuOS8zMg0KICAgIFBlcnNpc3RlbnRLZWVwYWxpdmUgPSAyNQ0KDQoNCg0KW1BlZXJdDQogICAgUHVibGljS2V5ID0gSVdneldWMGpLRjhsZWwxcmNIczJOV2NyVURRckxHbHlXRlFsVFQ4amUzMA0KICAgIEFsbG93ZWRJUHMgPSAxMC4xMDIuMC43LzMyDQogICAgUGVyc2lzdGVudEtlZXBhbGl2ZSA9IDI1DQoNCg0K"
      },

      "ArrayOfSemanticTags": {
        "title": "Tags",
        "description" : "An array of semantic tags.",
        "type": "array",
        "items": { "$ref": "#/components/schemas/SemanticTag" }
      },
      "ArrayOfMembers": {
        "title": "Members",
        "description": "List of `Member`s in a networkgroup.",
        "type": "array",
        "items": { "$ref": "#/components/schemas/Member" }
      },
      "ArrayOfPeers": {
        "title": "Peers",
        "description": "List of `Peer`s in a networkgroup.",
        "type": "array",
        "items": { "$ref": "#/components/schemas/Peer" }
      }
    },
    "requestBodies": {
      "CreateNetworkgroup": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/CreateNetworkgroupRequest" },
            "examples": {
              "default": { "$ref": "#/components/examples/CreateNetworkgroupRequest" },
              "Dynamic": { "$ref": "#/components/examples/CreateNetworkgroupRequest_Postman" }
            }
          }
        }
      },

      "AddMember": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/AddMemberRequest" },
            "examples": {
              "default": { "$ref": "#/components/examples/AddMemberRequest" },
              "Dynamic": { "$ref": "#/components/examples/AddMemberRequest_Postman" }
            }
          }
        }
      }
    },
    "responses": {
      "EmptyJSON": {
        "description": "Success",
        "content": {
          "application/json": {}
        }
      },
      "AcceptedForProcessing": {
        "description": "Success - Accepted",
        "content": {
          "text/plain": {
            "schema" : {
              "type": "string",
              "example": "The request has been accepted for processing, but the processing has not been completed."
            }
          }
        }
      },
      "NoContent": {
        "description": "Success - No Content"
      },

      "ListNetworkgroupsSuccess": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Networkgroup"
              }
            },
            "examples": {
              "default": { "$ref": "#/components/examples/ArrayOfNetworkgroups" }
            }
          }
        }
      },
      "ListNetworkgroupsUnauthorized": {
        "description": "Unauthorized",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "User not in organization": {
                "value": "Authentication is possible but has failed or not yet been provided."
              }
            }
          }
        }
      },

      "CreateNetworkgroupSuccess": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Networkgroup" },
            "examples": {
              "Created networkgroup": { "$ref": "#/components/examples/NewNetworkgroup" }
            }
          }
        }
      },
      "CreateNetworkgroupBadRequest": {
        "description": "Bad Request",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "`owner_id` from body and path do not match": {
                "value": "server can't do that, owner_id does not match the orga_id from url"
              },
              "Invalid `id`": {
                "value": "server can't do that, Invalid NetworkGroup ID Some(6e0df72a-17df-47fa-92f5-90cc5df6deb3)"
              }
            }
          }
        }
      },
      "CreateNetworkgroupConflict": {
        "description": "Conflict",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Label already taken": {
                "value": "Seems this networkgroup label is already taken"
              }
            }
          }
        }
      },

      "DeleteNetworkgroupUnauthorized": {
        "description": "Unauthorized",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Owner not found": {
                "value": "Authentication is possible but has failed or not yet been provided."
              },
              "Networkgroup from another owner": {
                "value": "Authentication is possible but has failed or not yet been provided."
              }
            }
          }
        }
      },

      "ListMembersSuccess": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Member"
              }
            },
            "examples": {
              "default": { "$ref": "#/components/examples/ArrayOfMembers" }
            }
          }
        }
      },
      "ListMembersNotFound" : {
        "description": "Not Found",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Networkgroup not found": {
                "value": "The requested resource could not be found but may be available again in the future."
              }
            }
          }
        }
      },

      "AddMemberBadRequest": {
        "description": "Bad Request",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Invalid body (e.g. `type`)": {
                "value": "server can't do that, Seems the member you try to add is invalid"
              }
            }
          }
        }
      },
      "AddMemberUnauthorized": {
        "description": "Unauthorized",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Owner not found": {
                "value": "Authentication is possible but has failed or not yet been provided."
              },
              "Networkgroup from another owner": {
                "value": "Authentication is possible but has failed or not yet been provided."
              }
            }
          }
        }
      },
      "AddMemberNotFound": {
        "description": "Not Found",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Networkgroup not found": {
                "value": "The requested resource could not be found but may be available again in the future."
              }
            }
          }
        }
      },

      "GetMemberSuccess": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Member"
            },
            "examples": {
              "default": { "$ref": "#/components/examples/Member" }
            }
          }
        }
      },
      "GetMemberUnauthorized": {
        "description": "Unauthorized",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Owner not found": {
                "value": "Authentication is possible but has failed or not yet been provided."
              },
              "Networkgroup from another owner": {
                "value": "Authentication is possible but has failed or not yet been provided."
              }
            }
          }
        }
      },
      "GetMemberNotFound": {
        "description": "Not Found",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Networkgroup not found": {
                "value": "The requested resource could not be found but may be available again in the future."
              },
              "Member not found": {
                "value": "The requested resource could not be found but may be available again in the future."
              }
            }
          }
        }
      },

      "ListPeersSuccess": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ArrayOfPeers" },
            "examples": {
              "default": { "$ref": "#/components/examples/ArrayOfPeers" }
            }
          }
        }
      },
      "ListPeersUnauthorized": {
        "description": "Unauthorized",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Owner not found": {
                "value": "Authentication is possible but has failed or not yet been provided."
              },
              "Networkgroup from another owner": {
                "value": "Authentication is possible but has failed or not yet been provided."
              }
            }
          }
        }
      },
      "ListPeersNotFound": {
        "description": "Not Found",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Networkgroup not found": {
                "value": "The requested resource could not be found but may be available again in the future."
              }
            }
          }
        }
      },

      "GetPeerSuccess": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Peer"
            },
            "examples": {
              "default": { "$ref": "#/components/examples/Peer" }
            }
          }
        }
      },
      "GetPeerUnauthorized": {
        "description": "Unauthorized",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Owner not found": {
                "value": "Authentication is possible but has failed or not yet been provided."
              },
              "Networkgroup from another owner": {
                "value": "Authentication is possible but has failed or not yet been provided."
              }
            }
          }
        }
      },
      "GetPeerNotFound": {
        "description": "Not Found",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "examples": {
              "Networkgroup not found": {
                "value": "The requested resource could not be found but may be available again in the future."
              },
              "Peer not found": {
                "value": "The requested resource could not be found but may be available again in the future."
              }
            }
          }
        }
      },

      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "Authentication is possible but has failed or not yet been provided."
          }
        }
      },
      "UnauthorizedNgNotInOrga": {
        "description": "Unauthorized (networkgroup in another organization)",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "Authentication is possible but has failed or not yet been provided."
          }
        }
      }
    },
    "examples": {
      "NewNetworkgroup": {
        "summary": "Newly created networkgroup",
        "value": {
          "id": "ng_9636dfb1-d507-48d1-8c49-efedba0bbf22",
          "owner_id": "orga_74d97a1f-30a9-4015-8f69-bd46e0152417",
          "label": "example-ng",
          "description": "Example networkgroup",
          "network_ip": "10.101.0.0/16",
          "last-allocated-ip": "10.101.0.0",
          "tags": [],
          "peers": [],
          "members": [],
          "version": 0
        }
      },
      "Networkgroup": {
        "summary": "Example networkgroup",
        "value": {
          "id": "ng_c1acf968-be9b-4d84-a10c-c6817fada09d",
          "owner_id": "orga_3eb78ce1-4ce8-4853-90cb-81c3e13c047f",
          "label": "test-ng",
          "description": "NG example",
          "network_ip": "10.101.0.0/16",
          "last-allocated-ip": "10.101.0.12",
          "tags": [],
          "peers": [
            {
              "id": "ea21854c-a12a-4f90-9701-d329d8f99f96",
              "label": "java-1",
              "hostname": "java-1",
              "hv": {
                "host": "hv-par0-001",
                "zone": {
                  "id": "par0"
                }
              },
              "public-key": "kd9swNEpWvoovJ9QO8xZg3SEm7RPSDddgdA5KyEFtgM=",
              "endpoint": {
                "ng-term": {
                  "ip": "10.101.0.7",
                  "port": 50159
                },
                "public-term": {
                  "ip": "62.210.251.80",
                  "port": 45000
                },
                "type": "ServerEndpoint"
              },
              "parent_event": null,
              "parent_member": "app_b888f06d-3adb-4cf1-b017-7eac4f096e90",
              "type": "CleverPeer"
            },
            {
              "id": "external_f7f5fa23-a469-48c9-bf0b-7d8583d603b1",
              "label": "mylaptop",
              "hostname": "mylaptop",
              "public-key": "GfTtsW0lrKjr7EDsrg2jglikIB+f3cV/wdBoThsESnA=",
              "endpoint": {
                "ng-ip": "10.101.0.12",
                "type": "ClientEndpoint"
              },
              "parent_event": null,
              "parent_member": "app_b888f06d-3adb-4cf1-b017-7eac4f096e93",
              "type": "ExternalPeer"
            }
          ],
          "members": [
            {
              "id": "app_b888f06d-3adb-4cf1-b017-7eac4f096e93",
              "label": "app_b888f06d-3adb-4cf1-b017-7eac4f096e93",
              "domain-name": "mydom",
              "type": "externalNode"
            },
            {
              "id": "app_b888f06d-3adb-4cf1-b017-7eac4f096e90",
              "label": "app_b888f06d-3adb-4cf1-b017-7eac4f096e90",
              "domain-name": "app-tester",
              "type": "application"
            }
          ],
          "version": 14
        }
      },
      "ArrayOfNetworkgroups": {
        "summary": "Simple Example",
        "description": "An example list of networkgroups.",
        "value": [
          {
            "id": "ng_c1acf968-be9b-4d84-a10c-c6817fada09d",
            "owner_id": "orga_3eb78ce1-4ce8-4853-90cb-81c3e13c047f",
            "label": "test-ng",
            "description": "NG example",
            "network_ip": "10.101.0.0/16",
            "last-allocated-ip": "10.101.0.12",
            "tags": [],
            "peers": [
              {
                "id": "ea21854c-a12a-4f90-9701-d329d8f99f96",
                "label": "java-1",
                "hostname": "java-1",
                "hv": {
                  "host": "hv-par0-001",
                  "zone": {
                    "id": "par0"
                  }
                },
                "public-key": "kd9swNEpWvoovJ9QO8xZg3SEm7RPSDddgdA5KyEFtgM=",
                "endpoint": {
                  "ng-term": {
                    "ip": "10.101.0.7",
                    "port": 50159
                  },
                  "public-term": {
                    "ip": "62.210.251.80",
                    "port": 45000
                  },
                  "type": "ServerEndpoint"
                },
                "parent_event": null,
                "parent_member": "app_b888f06d-3adb-4cf1-b017-7eac4f096e90",
                "type": "CleverPeer"
              },
              {
                "id": "external_f7f5fa23-a469-48c9-bf0b-7d8583d603b1",
                "label": "mylaptop",
                "hostname": "mylaptop",
                "public-key": "GfTtsW0lrKjr7EDsrg2jglikIB+f3cV/wdBoThsESnA=",
                "endpoint": {
                  "ng-ip": "10.101.0.12",
                  "type": "ClientEndpoint"
                },
                "parent_event": null,
                "parent_member": "app_b888f06d-3adb-4cf1-b017-7eac4f096e93",
                "type": "ExternalPeer"
              }
            ],
            "members": [
              {
                "id": "app_b888f06d-3adb-4cf1-b017-7eac4f096e93",
                "label": "app_b888f06d-3adb-4cf1-b017-7eac4f096e93",
                "domain-name": "mydom",
                "type": "externalNode"
              },
              {
                "id": "app_b888f06d-3adb-4cf1-b017-7eac4f096e90",
                "label": "app_b888f06d-3adb-4cf1-b017-7eac4f096e90",
                "domain-name": "app-tester",
                "type": "application"
              }
            ],
            "version": 14
          },
          {
            "id": "ng_9636dfb1-d507-48d1-8c49-efedba0bbf22",
            "owner_id": "orga_74d97a1f-30a9-4015-8f69-bd46e0152417",
            "label": "example-ng",
            "description": "Example networkgroup",
            "network_ip": "10.101.0.0/16",
            "last-allocated-ip": "10.101.0.0",
            "tags": [],
            "peers": [],
            "members": [],
            "version": 0
          }
        ]
      },
      "CreateNetworkgroupRequest": {
        "summary": "Simple Example",
        "description": "Example request for creating a networkgroup.",
        "value": {
          "owner_id": "orga_4cad2a15-7898-4573-bfa9-d9f938088836",
          "label": "my-networkgroup",
          "description": "Networkgroup with my apps and add-ons",
          "tags": ["apps", "test"]
        }
      },
      "CreateNetworkgroupRequest_Postman": {
        "summary": "Postman Dynamic Example",
        "description": "Example request for creating a networkgroup with Postman.",
        "value": {
          "owner_id": "{{ownerId}}",
          "label": "{{$randomLoremSlug}}",
          "description": "{{$randomLoremText}}",
          "tags": ["{{$randomLoremWord}}", "{{$randomLoremWord}}"]
        }
      },

      "Member": {
        "summary": "Example networkgroup member",
        "value": {
          "id": "app_0596acdb-fc59-4fdd-b747-0e3754460a63",
          "label": "My Member",
          "domain-name": "my-domain",
          "type": "application"
        }
      },
      "ArrayOfMembers": {
        "summary": "Simple Example",
        "description": "An example list of networkgroup members.",
        "value": [
          {
            "id": "app_c992f9db-9a03-4e96-b1ab-29afedebee93",
            "label": "My first app",
            "domain-name": "app-1",
            "type": "application"
          },
          {
            "id": "laptops-1",
            "label": "Company laptops",
            "domain-name": "laptops",
            "type": "externalNode"
          }
        ]
      },
      "AddMemberRequest": {
        "summary": "Simple Example",
        "description": "Example request for adding a networkgroup member.",
        "value": {
          "id": "app_52061589-530c-448a-8a2b-217230da2408",
          "label": "My Member",
          "domain-name": "my-domain",
          "type": "application"
        }
      },
      "AddMemberRequest_Postman": {
        "summary": "Postman Dynamic Example",
        "description": "Example request for adding a networkgroup member with Postman.",
        "value": {
          "id": "{{$randomLoremSlug}}",
          "label": "{{$randomLoremWords}}",
          "domain-name": "{{$randomLoremSlug}}",
          "type": "external"
        }
      },

      "Peer": {
        "summary": "Example peer",
        "value": {
          "id": "ea21854c-a12a-4f90-9701-d329d8f99f96",
          "label": "java-1",
          "hostname": "java-1",
          "hv": {
            "host": "hv-par0-001",
            "zone": {
              "id": "par0"
            }
          },
          "public-key": "kd9swNEpWvoovJ9QO8xZg3SEm7RPSDddgdA5KyEFtgM=",
          "endpoint": {
            "ng-term": {
              "ip": "10.101.0.7",
              "port": 50159
            },
            "public-term": {
              "ip": "62.210.251.80",
              "port": 45000
            },
            "type": "ServerEndpoint"
          },
          "parent_event": null,
          "parent_member": "app_b888f06d-3adb-4cf1-b017-7eac4f096e90",
          "type": "CleverPeer"
        }
      },
      "ArrayOfPeers": {
        "summary": "Simple Example",
        "description": "An example list of networkgroup peers.",
        "value": [
          {
            "id": "ea21854c-a12a-4f90-9701-d329d8f99f96",
            "label": "java-1",
            "hostname": "java-1",
            "hv": {
              "host": "hv-par0-001",
              "zone": {
                "id": "par0"
              }
            },
            "public-key": "kd9swNEpWvoovJ9QO8xZg3SEm7RPSDddgdA5KyEFtgM=",
            "endpoint": {
              "ng-term": {
                "ip": "10.101.0.7",
                "port": 50159
              },
              "public-term": {
                "ip": "62.210.251.80",
                "port": 45000
              },
              "type": "ServerEndpoint"
            },
            "parent_event": null,
            "parent_member": "app_b888f06d-3adb-4cf1-b017-7eac4f096e90",
            "type": "CleverPeer"
          },
          {
            "id": "external_f7f5fa23-a469-48c9-bf0b-7d8583d603b1",
            "label": "mylaptop",
            "hostname": "mylaptop",
            "public-key": "GfTtsW0lrKjr7EDsrg2jglikIB+f3cV/wdBoThsESnA=",
            "endpoint": {
              "ng-ip": "10.101.0.12",
              "type": "ClientEndpoint"
            },
            "parent_event": null,
            "parent_member": "app_b888f06d-3adb-4cf1-b017-7eac4f096e93",
            "type": "ExternalPeer"
          }
        ]
      },

      "Hypervisor": {
        "summary": "Example hypervisor",
        "value": {
          "host": "hv-par0-001",
          "zone": {
            "id": "par0"
          }
        }
      },
      "Zone": {
        "summary": "Example zone",
        "value": {
          "id": "par0"
        }
      },
      "Endpoint": {
        "summary": "Example networkgroup enndpoint",
        "value": {
          "ng-term": {
            "ip": "10.101.0.7",
            "port": 50159
          },
          "public-term": {
            "ip": "62.210.251.80",
            "port": 45000
          },
          "type": "ServerEndpoint"
        }
      },
      "NetworkgroupTerm": {
        "summary": "Example networkgroup termination",
        "value": {
          "ip": "10.101.0.7",
          "port": 50159
        }
      },
      "PublicTerm": {
        "summary": "Example public termination",
        "value": {
          "ip": "62.210.251.80",
          "port": 45000
        }
      }
    }
  },
  "tags": [
    {
      "name": "networkgroups",
      "description": "Networkgroups"
    },
    {
      "name": "sse",
      "description": "Server Sent Events"
    }
  ]
}
